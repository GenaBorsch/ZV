import { config } from 'dotenv';
import { resolve } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
config({ path: resolve(__dirname, '../../../.env') });

import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import * as schema from './schema';
import { eq } from 'drizzle-orm';
import bcrypt from 'bcryptjs';

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL
const connectionString = process.env.DATABASE_URL!;
console.log('üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL:', connectionString);

const client = postgres(connectionString);
const db = drizzle(client, { schema });

const { 
  users, userRoles, seasons, masterProfiles, playerProfiles, 
  groups, groupMembers, characters, products, battlepasses
} = schema;

async function main() {
  console.log('üöÄ –°–æ–∑–¥–∞—é –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω
    await createActiveSeason();
    
    // 2. –°–æ–∑–¥–∞–µ–º –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await createTestUsers();
    
    // 3. –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    await createAdditionalUsers();
    
    // 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã
    await createTestGroups();
    
    // 5. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    await createTestCharacters();
    
    // 6. –°–æ–∑–¥–∞–µ–º –±–∞—Ç—Ç–ª–ø–∞—Å—Å—ã/–ø—Ä–æ–¥—É–∫—Ç—ã
    await createTestProducts();
    
    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  } finally {
    await client.end();
  }
}

async function createActiveSeason() {
  console.log('üìÖ –°–æ–∑–¥–∞—é –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω...');
  
  const existingActiveSeason = await db
    .select()
    .from(seasons)
    .where(eq(seasons.isActive, true))
    .limit(1);

  if (existingActiveSeason.length === 0) {
    const currentDate = new Date();
    const startDate = new Date(currentDate.getFullYear(), 0, 1);
    const endDate = new Date(currentDate.getFullYear(), 11, 31);

    const [newSeason] = await db
      .insert(seasons)
      .values({
        title: `–°–µ–∑–æ–Ω ${currentDate.getFullYear()}`,
        code: `SEASON_${currentDate.getFullYear()}`,
        startsAt: startDate,
        endsAt: endDate,
        isActive: true,
      })
      .returning();

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω:', newSeason.title);
  } else {
    console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingActiveSeason[0].title);
  }
}

async function createTestUsers() {
  console.log('üë• –°–æ–∑–¥–∞—é –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  const testUsers = [
    {
      email: 'demoadmin@zvezdnoe-vereteno.ru',
      name: '–î–µ–º–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      role: 'SUPERADMIN' as const,
      rpgExperience: 'VETERAN' as const,
      contacts: 'Telegram: @demo_admin, Email: admin@example.com'
    },
    {
      email: 'demomoderator@zvezdnoe-vereteno.ru',
      name: '–î–µ–º–æ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
      role: 'MODERATOR' as const,
      rpgExperience: 'VETERAN' as const,
      contacts: 'Telegram: @demo_moderator, Discord: moderator#1234'
    },
    {
      email: 'demomaster@zvezdnoe-vereteno.ru',
      name: '–î–µ–º–æ –ú–∞—Å—Ç–µ—Ä',
      role: 'MASTER' as const,
      rpgExperience: 'VETERAN' as const,
      contacts: 'Telegram: @demo_master, VK: vk.com/demo_master'
    },
    {
      email: 'demoplayer@zvezdnoe-vereteno.ru',
      name: '–î–µ–º–æ –ò–≥—Ä–æ–∫',
      role: 'PLAYER' as const,
      rpgExperience: 'INTERMEDIATE' as const,
      contacts: 'Discord: demo_player#1234, Telegram: @demo_player'
    }
  ];

  const password = 'demo1234';
  const passwordHash = bcrypt.hashSync(password, 10);

  for (const testUser of testUsers) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existing = await db
      .select()
      .from(users)
      .where(eq(users.email, testUser.email))
      .limit(1);

    let user = existing[0];
    
    if (user) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updated = await db
        .update(users)
        .set({
          passwordHash,
          name: testUser.name,
          rpgExperience: testUser.rpgExperience,
          contacts: testUser.contacts,
          updatedAt: new Date(),
        })
        .where(eq(users.id, user.id))
        .returning();
      
      user = updated[0];
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', testUser.email);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const created = await db
        .insert(users)
        .values({
          email: testUser.email,
          name: testUser.name,
          passwordHash,
          rpgExperience: testUser.rpgExperience,
          contacts: testUser.contacts,
        })
        .returning();
      
      user = created[0];
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', testUser.email);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ä–æ–ª—å
    const existingRole = await db
      .select()
      .from(userRoles)
      .where(eq(userRoles.userId, user.id))
      .limit(1);

    if (existingRole.length === 0) {
      await db.insert(userRoles).values({
        userId: user.id,
        role: testUser.role,
      });
      console.log('‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å:', testUser.role);
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –∏–≥—Ä–æ–∫–æ–≤
    if (testUser.role === 'MASTER') {
      await createMasterProfile(user.id, testUser.email);
    } else if (testUser.role === 'PLAYER') {
      await createPlayerProfile(user.id, testUser.email);
    }
  }
}

async function createMasterProfile(userId: string, email: string) {
  const existingProfile = await db
    .select()
    .from(masterProfiles)
    .where(eq(masterProfiles.userId, userId))
    .limit(1);

  if (existingProfile.length === 0) {
    await db.insert(masterProfiles).values({
      userId,
      bio: '–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä —Å 10+ –ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —ç–ø–∏—á–µ—Å–∫–æ–º —Ñ—ç–Ω—Ç–µ–∑–∏ –∏ –∫–æ—Å–º–æ–æ–ø–µ—Ä–µ. –õ—é–±–ª—é –≥–ª—É–±–æ–∫–∏–µ —Å—é–∂–µ—Ç—ã –∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.',
      format: 'MIXED',
      location: '–ú–æ—Å–∫–≤–∞/–û–Ω–ª–∞–π–Ω',
    });
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è', email);
  }
}

async function createPlayerProfile(userId: string, email: string) {
  const existingProfile = await db
    .select()
    .from(playerProfiles)
    .where(eq(playerProfiles.userId, userId))
    .limit(1);

  if (existingProfile.length === 0) {
    await db.insert(playerProfiles).values({
      userId,
      nickname: null,
      notes: '–õ—é–±–ª—é –∏–≥—Ä–∞—Ç—å –∑–∞ –≤–æ–∏–Ω–æ–≤ –∏ –ø–∞–ª–∞–¥–∏–Ω–æ–≤. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ä–æ–ª–µ–≤—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ —ç–ø–∏—á–µ—Å–∫–∏–µ –±–∏—Ç–≤—ã. –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –∫–æ–º–∞–Ω–¥–µ!',
    });
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ –¥–ª—è', email);
  }
}

async function createAdditionalUsers() {
  console.log('üë• –°–æ–∑–¥–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  const additionalUsers = [
    {
      email: 'testmaster1@zvezdnoe-vereteno.ru',
      name: '–ê–ª–µ–∫—Å–µ–π –ú–∞—Å—Ç–µ—Ä—Å–∫–∏–π',
      role: 'MASTER' as const,
      rpgExperience: 'VETERAN' as const,
      contacts: 'Discord: AlexMaster#5678',
      masterBio: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ö–æ—Ä—Ä–æ—Ä-–∫–∞–º–ø–∞–Ω–∏—è—Ö –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∏–ª–ª–µ—Ä–∞—Ö. 8 –ª–µ—Ç –æ–ø—ã—Ç–∞.',
      masterLocation: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
    },
    {
      email: 'testmaster2@zvezdnoe-vereteno.ru',
      name: '–ú–∞—Ä–∏—è –°–∫–∞–∑–∏—Ç–µ–ª—å–Ω–∏—Ü–∞',
      role: 'MASTER' as const,
      rpgExperience: 'INTERMEDIATE' as const,
      contacts: 'Telegram: @maria_storyteller',
      masterBio: '–ú–æ–ª–æ–¥–æ–π –º–∞—Å—Ç–µ—Ä, —É–≤–ª–µ–∫–∞—é—Å—å –≥–æ—Ä–æ–¥—Å–∫–∏–º —Ñ—ç–Ω—Ç–µ–∑–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–µ—Ç—Ç–∏–Ω–≥–∞–º–∏.',
      masterLocation: '–û–Ω–ª–∞–π–Ω'
    },
    {
      email: 'testplayer1@zvezdnoe-vereteno.ru',
      name: '–î–º–∏—Ç—Ä–∏–π –í–æ–∏–Ω',
      role: 'PLAYER' as const,
      rpgExperience: 'VETERAN' as const,
      contacts: 'Steam: WarriorDmitry',
      playerNickname: '–°—Ç–∞–ª—å–Ω–æ–π –ö–ª–∏–Ω–æ–∫',
      playerNotes: '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –∏–≥—Ä–∞—Ç—å —Ç–∞–Ω–∫–æ–≤ –∏ –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤. –õ—é–±–ª—é —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –±–æ–∏.'
    },
    {
      email: 'testplayer2@zvezdnoe-vereteno.ru',
      name: '–ê–Ω–Ω–∞ –ú–∞–≥–∏—á–∫–∞',
      role: 'PLAYER' as const,
      rpgExperience: 'INTERMEDIATE' as const,
      contacts: 'Discord: MagicAnna#9999',
      playerNickname: '–õ—É–Ω–Ω–∞—è –í–æ–ª—à–µ–±–Ω–∏—Ü–∞',
      playerNotes: '–ò–≥—Ä–∞—é –∑–∞ –º–∞–≥–æ–≤ –∏ —Ü–µ–ª–∏—Ç–µ–ª–µ–π. –õ—é–±–ª—é –∑–∞–≥–∞–¥–∫–∏ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.'
    },
    {
      email: 'testplayer3@zvezdnoe-vereteno.ru',
      name: '–°–µ—Ä–≥–µ–π –•–∏—Ç—Ä–µ—Ü',
      role: 'PLAYER' as const,
      rpgExperience: 'NOVICE' as const,
      contacts: 'Telegram: @sergey_rogue',
      playerNickname: '–¢–∏—Ö–∏–π –®–∞–≥',
      playerNotes: '–ù–æ–≤–∏—á–æ–∫ –≤ –ù–†–ò. –•–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–≥—Ä–∞—Ç—å –∑–∞ –≤–æ—Ä–æ–≤ –∏ —Ä–∞–∑–≤–µ–¥—á–∏–∫–æ–≤.'
    }
  ];

  const password = 'demo1234';
  const passwordHash = bcrypt.hashSync(password, 10);

  for (const testUser of additionalUsers) {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existing = await db
      .select()
      .from(users)
      .where(eq(users.email, testUser.email))
      .limit(1);

    if (existing.length === 0) {
      const [user] = await db
        .insert(users)
        .values({
          email: testUser.email,
          name: testUser.name,
          passwordHash,
          rpgExperience: testUser.rpgExperience,
          contacts: testUser.contacts,
        })
        .returning();

      // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å
      await db.insert(userRoles).values({
        userId: user.id,
        role: testUser.role,
      });

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
      if (testUser.role === 'MASTER') {
        await db.insert(masterProfiles).values({
          userId: user.id,
          bio: testUser.masterBio,
          format: 'MIXED',
          location: testUser.masterLocation,
        });
      } else if (testUser.role === 'PLAYER') {
        await db.insert(playerProfiles).values({
          userId: user.id,
          nickname: testUser.playerNickname,
          notes: testUser.playerNotes,
        });
      }

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', testUser.email);
    }
  }
}

async function createTestGroups() {
  console.log('üé≠ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã...');
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω
  const activeSeason = await db
    .select()
    .from(seasons)
    .where(eq(seasons.isActive, true))
    .limit(1);

  if (activeSeason.length === 0) {
    console.log('‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤
  const mastersData = await db
    .select({
      userId: users.id,
      email: users.email,
      name: users.name,
      masterProfileId: masterProfiles.id
    })
    .from(users)
    .innerJoin(userRoles, eq(users.id, userRoles.userId))
    .innerJoin(masterProfiles, eq(users.id, masterProfiles.userId))
    .where(eq(userRoles.role, 'MASTER'));

  if (mastersData.length === 0) {
    console.log('‚ö†Ô∏è –ú–∞—Å—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø');
    return;
  }

  const testGroups = [
    {
      name: '–õ–µ–≥–µ–Ω–¥—ã –°—Ä–µ–¥–∏–∑–µ–º—å—è',
      description: '–≠–ø–∏—á–µ—Å–∫–∞—è –∫–∞–º–ø–∞–Ω–∏—è –ø–æ –º–∏—Ä—É –¢–æ–ª–∫–∏–Ω–∞. –ü—É—Ç–µ—à–µ—Å—Ç–≤—É–µ–º –æ—Ç –•–æ–±–±–∏—Ç–∞–Ω–∏–∏ –¥–æ –ú–æ—Ä–¥–æ—Ä–∞, –≤—Å—Ç—Ä–µ—á–∞–µ–º –∑–Ω–∞–∫–æ–º—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–µ–≥–µ–Ω–¥—ã.',
      format: 'MIXED' as const,
      location: '–ú–æ—Å–∫–≤–∞/–û–Ω–ª–∞–π–Ω',
      maxPlayers: 6,
      currentPlayers: 4,
      masterId: mastersData[0]?.masterProfileId
    },
    {
      name: '–ö–∏–±–µ—Ä–ø–∞–Ω–∫ 2077: –ù–∞–π—Ç-–°–∏—Ç–∏',
      description: '–ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –º–∏—Ä –∫–∏–±–µ—Ä–ø–∞–Ω–∫–∞. –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç—Ä–∏–≥–∏, —É–ª–∏—á–Ω—ã–µ –±–∞–Ω–¥—ã –∏ –≤—ã—Å–æ–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –∞–Ω—Ç–∏—É—Ç–æ–ø–∏—á–µ—Å–∫–æ–º –±—É–¥—É—â–µ–º.',
      format: 'ONLINE' as const,
      location: '–û–Ω–ª–∞–π–Ω',
      maxPlayers: 4,
      currentPlayers: 2,
      masterId: mastersData[1]?.masterProfileId || mastersData[0]?.masterProfileId
    },
    {
      name: '–£–∂–∞—Å—ã –ê—Ä–∫—Ö—ç–º–∞',
      description: '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ—Ä—Ä–æ—Ä –≤ –¥—É—Ö–µ –õ–∞–≤–∫—Ä–∞—Ñ—Ç–∞. –ò—Å—Å–ª–µ–¥—É–µ–º –¥—Ä–µ–≤–Ω–∏–µ —Ç–∞–π–Ω—ã, –±–æ—Ä–µ–º—Å—è —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ —É–∂–∞—Å–∞–º–∏ –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Å—É–¥–æ–∫.',
      format: 'OFFLINE' as const,
      location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      maxPlayers: 5,
      currentPlayers: 3,
      masterId: mastersData[0]?.masterProfileId
    }
  ];

  for (const groupData of testGroups) {
    if (!groupData.masterId) continue;
    
    const existing = await db
      .select()
      .from(groups)
      .where(eq(groups.name, groupData.name))
      .limit(1);

    if (existing.length === 0) {
      const [group] = await db
        .insert(groups)
        .values({
          name: groupData.name,
          description: groupData.description,
          format: groupData.format,
          place: groupData.location,
          maxMembers: groupData.maxPlayers,
          masterId: groupData.masterId,
          seasonId: activeSeason[0].id,
          isRecruiting: true,
        })
        .returning();

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞:', groupData.name);

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—ã
      await addPlayersToGroup(group.id, Math.min(groupData.currentPlayers, 3));
    }
  }
}

async function addPlayersToGroup(groupId: string, playerCount: number) {
  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
  const playersData = await db
    .select({
      userId: users.id,
      playerProfileId: playerProfiles.id
    })
    .from(users)
    .innerJoin(userRoles, eq(users.id, userRoles.userId))
    .innerJoin(playerProfiles, eq(users.id, playerProfiles.userId))
    .where(eq(userRoles.role, 'PLAYER'))
    .limit(playerCount);

  for (const player of playersData) {
    const existing = await db
      .select()
      .from(groupMembers)
      .where(eq(groupMembers.playerId, player.playerProfileId))
      .limit(1);

    if (existing.length === 0) {
      await db.insert(groupMembers).values({
        groupId,
        playerId: player.playerProfileId,
        status: 'ACTIVE',
      });
    }
  }
}

async function createTestCharacters() {
  console.log('‚öîÔ∏è –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...');
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
  const playersData = await db
    .select({
      userId: users.id,
      name: users.name,
      playerProfileId: playerProfiles.id
    })
    .from(users)
    .innerJoin(userRoles, eq(users.id, userRoles.userId))
    .innerJoin(playerProfiles, eq(users.id, playerProfiles.userId))
    .where(eq(userRoles.role, 'PLAYER'));

  const testCharacters = [
    {
      name: '–ê—Ä–∞–≥–æ—Ä–Ω –°–ª–µ–¥–æ–ø—ã—Ç',
      archetype: '–°–ª–µ–¥–æ–ø—ã—Ç',
      level: 15,
      backstory: '–ù–∞—Å–ª–µ–¥–Ω–∏–∫ –ø—Ä–µ—Å—Ç–æ–ª–∞ –ì–æ–Ω–¥–æ—Ä–∞, —Å–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è –ø–æ–¥ –∏–º–µ–Ω–µ–º –ë—Ä–æ–¥—è–∂–Ω–∏–∫–∞. –î–æ–ª–≥–∏–µ –≥–æ–¥—ã –∑–∞—â–∏—â–∞–ª –≥—Ä–∞–Ω–∏—Ü—ã –æ—Ç —Ç—å–º—ã, –æ–∂–∏–¥–∞—è —Å–≤–æ–µ–≥–æ —á–∞—Å–∞.',
      journal: '–î–µ–Ω—å 1: –í—Å—Ç—Ä–µ—Ç–∏–ª —Ö–æ–±–±–∏—Ç–æ–≤ –≤ –ü—Ä–∏–≥–æ–∂–∏–Ω–µ. –°—Ç—Ä–∞–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è...\n–î–µ–Ω—å 15: –ë–∏—Ç–≤–∞ –ø—Ä–∏ –•–µ–ª—å–º–æ–≤–æ–π –ü–∞–¥–∏. –ú—ã –ø–æ–±–µ–¥–∏–ª–∏, –Ω–æ –∫–∞–∫–æ–π —Ü–µ–Ω–æ–π.\n–î–µ–Ω—å 30: –ö–æ—Ä–æ–Ω–∞—Ü–∏—è. –ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø—Ä–∏–Ω—è–ª —Å–≤–æ—é —Å—É–¥—å–±—É.',
      notes: '–í–ª–∞–¥–µ–µ—Ç –º–µ—á–æ–º –ê–Ω–¥—É—Ä–∏–ª. –ò–º–µ–µ—Ç –æ—Å–æ–±—É—é —Å–≤—è–∑—å —Å —ç–ª—å—Ñ–∞–º–∏.',
      avatarUrl: 'https://images.unsplash.com/photo-1566492031773-4f4e44671d66?w=150&h=150&fit=crop&crop=face'
    },
    {
      name: '–õ–∏—Ä–∞–ª–µ–π –õ—É–Ω–Ω–∞—è –ü–µ–≤–∏—Ü–∞',
      archetype: '–ë–∞—Ä–¥',
      level: 12,
      backstory: '–≠–ª—å—Ñ–∏–π—Å–∫–∞—è –º–µ–Ω–µ—Å—Ç—Ä–µ–ª—å, –ø—É—Ç–µ—à–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ –º–∏—Ä—É –≤ –ø–æ–∏—Å–∫–∞—Ö –¥—Ä–µ–≤–Ω–∏—Ö –º–µ–ª–æ–¥–∏–π –∏ –∑–∞–±—ã—Ç—ã—Ö –∏—Å—Ç–æ—Ä–∏–π.',
      journal: '–°–µ–≥–æ–¥–Ω—è –≤—ã—É—á–∏–ª–∞ –Ω–æ–≤—É—é –ø–µ—Å–Ω—é –æ –¥—Ä–∞–∫–æ–Ω–∞—Ö...\n–í—Å—Ç—Ä–µ—Ç–∏–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç–æ–≤.\n–ú–æ—è –ª—é—Ç–Ω—è –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–µ—Ç–∏—Ç—å—Å—è –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –ª—É–Ω–µ.',
      notes: '–ú–∞–≥–∏—á–µ—Å–∫–∞—è –ª—é—Ç–Ω—è, —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω–∞—è –æ—Ç –±–∞–±—É—à–∫–∏. –ó–Ω–∞–µ—Ç –¥—Ä–µ–≤–Ω–∏–µ —ç–ª—å—Ñ–∏–π—Å–∫–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è.',
      avatarUrl: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=150&h=150&fit=crop&crop=face'
    },
    {
      name: '–¢–æ—Ä–∏–Ω –ñ–µ–ª–µ–∑–Ω–∞—è –ë–æ—Ä–æ–¥–∞',
      archetype: '–í–æ–∏–Ω',
      level: 18,
      backstory: '–î–≤–∞—Ä—Ñ–∏–π—Å–∫–∏–π –±–µ—Ä—Å–µ—Ä–∫–µ—Ä –∏–∑ –∫–ª–∞–Ω–∞ –ñ–µ–ª–µ–∑–Ω–æ–π –ì–æ—Ä—ã. –ü–æ–∫–ª—è–ª—Å—è –æ—Ç–æ–º—Å—Ç–∏—Ç—å –∑–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ —Ä–æ–¥–Ω–æ–≥–æ –¥–æ–º–∞.',
      journal: '–û—Ä–∫–∏ —Å–Ω–æ–≤–∞ –Ω–∞–ø–∞–ª–∏ –Ω–∞ –∫–∞—Ä–∞–≤–∞–Ω...\n–ù–∞—à–µ–ª —Å–ª–µ–¥—ã —Å–≤–æ–µ–≥–æ –∑–∞–∫–ª—è—Ç–æ–≥–æ –≤—Ä–∞–≥–∞.\n–¢–æ–ø–æ—Ä –¥–µ–¥—É—à–∫–∏ –∂–∞–∂–¥–µ—Ç –∫—Ä–æ–≤–∏ –≤—Ä–∞–≥–æ–≤.',
      notes: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ç–æ–ø–æ—Ä "–ì—Ä–æ–∑–∞ –û—Ä–∫–æ–≤". –ù–µ—É–∫—Ä–æ—Ç–∏–º–∞—è —è—Ä–æ—Å—Ç—å –≤ –±–æ—é.',
      avatarUrl: null
    },
    {
      name: '–ó–∞—Ä–∞ –ö–∏–±–µ—Ä-–Ω–∏–Ω–¥–∑—è',
      archetype: '–•–∞–∫–µ—Ä',
      level: 10,
      backstory: '–£–ª–∏—á–Ω–∞—è —Ö–∞–∫–µ—Ä—à–∞ –∏–∑ —Ç—Ä—É—â–æ–± –ù–∞–π—Ç-–°–∏—Ç–∏. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º —à–ø–∏–æ–Ω–∞–∂–µ –∏ –∫–∏–±–µ—Ä–≤–æ–π–Ω–µ.',
      journal: '–í–∑–ª–æ–º–∞–ª–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ê—Ä–∞—Å–∞–∫–∏...\n–ù–æ–≤—ã–µ –∏–º–ø–ª–∞–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ.\n–ö—Ç–æ-—Ç–æ —Å–ª–µ–¥–∏—Ç –∑–∞ –º–Ω–æ–π –≤ —Å–µ—Ç–∏.',
      notes: '–í–æ–µ–Ω–Ω—ã–µ –∫–∏–±–µ—Ä-–∏–º–ø–ª–∞–Ω—Ç—ã. –°–≤—è–∑–∏ –≤ –ø—Ä–µ—Å—Ç—É–ø–Ω–æ–º –º–∏—Ä–µ.',
      avatarUrl: 'https://images.unsplash.com/photo-1494790108755-2616c9d8c1a0?w=150&h=150&fit=crop&crop=face'
    },
    {
      name: '–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ê—Ä–∫—Ä–∞–π—Ç',
      archetype: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
      level: 8,
      backstory: '–ê—Ä—Ö–µ–æ–ª–æ–≥ –∏ –æ–∫–∫—É–ª—å—Ç–∏—Å—Ç –∏–∑ –ú–∏—Å–∫–∞—Ç–æ–Ω–∏–∫—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –ò–∑—É—á–∞–µ—Ç –¥—Ä–µ–≤–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ –∑–∞–ø—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è.',
      journal: '–ù–∞—à–µ–ª —Å—Ç—Ä–∞–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ...\n–°–Ω—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤—Å–µ –±–æ–ª–µ–µ —è—Ä–∫–∏–º–∏.\n–ß—Ç–æ-—Ç–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –º–Ω–æ–π –∏–∑ —Ç–µ–Ω–µ–π.',
      notes: '–û–±—à–∏—Ä–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –æ–∫–∫—É–ª—å—Ç–∏–∑–º–∞. –î–æ—Å—Ç—É–ø –∫ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.',
      avatarUrl: null
    }
  ];

  for (let i = 0; i < testCharacters.length && i < playersData.length; i++) {
    const character = testCharacters[i];
    const player = playersData[i];

    const existing = await db
      .select()
      .from(characters)
      .where(eq(characters.name, character.name))
      .limit(1);

    if (existing.length === 0) {
      await db.insert(characters).values({
        playerId: player.playerProfileId,
        name: character.name,
        archetype: character.archetype,
        level: character.level,
        backstory: character.backstory,
        journal: character.journal,
        notes: character.notes,
        avatarUrl: character.avatarUrl,
        isAlive: true,
      });

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂:', character.name, '–¥–ª—è –∏–≥—Ä–æ–∫–∞', player.name);
    }
  }
}

async function createTestProducts() {
  console.log('üí∞ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –±–∞—Ç—Ç–ª–ø–∞—Å—Å—ã...');
  
  const testProducts = [
    {
      sku: 'BP_SEASON_2025',
      title: '–°–µ–∑–æ–Ω–Ω—ã–π –ë–∞—Ç—Ç–ª–ø–∞—Å—Å 2025',
      description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º —Å–µ–∑–æ–Ω–∞ 2025. –í–∫–ª—é—á–∞–µ—Ç —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
      priceRub: 15,
      type: 'BATTLEPASS' as const,
      active: true,
      visible: true,
      seasonRequired: true,
      bpUsesTotal: 1,
      meta: {
        duration_months: 12,
        character_slots: 5,
        exclusive_content: true
      }
    },
    {
      sku: 'BP_QUARTER_2025',
      title: '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –ë–∞—Ç—Ç–ª–ø–∞—Å—Å',
      description: '–î–æ—Å—Ç—É–ø –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º –Ω–∞ 3 –º–µ—Å—è—Ü–∞. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.',
      priceRub: 5,
      type: 'BATTLEPASS' as const,
      active: true,
      visible: true,
      seasonRequired: false,
      bpUsesTotal: 1,
      meta: {
        duration_months: 3,
        character_slots: 2,
        exclusive_content: false
      }
    },
    {
      sku: 'ADDON_MASTER_KIT',
      title: '–ù–∞–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞',
      description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –≥—Ä—É–ø–ø, —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.',
      priceRub: 10,
      type: 'ADDON' as const,
      active: true,
      visible: true,
      seasonRequired: false,
      bpUsesTotal: 1,
      meta: {
        group_slots: 5,
        advanced_reports: true,
        master_materials: true
      }
    },
    {
      sku: 'MERCH_TSHIRT_001',
      title: '–§—É—Ç–±–æ–ª–∫–∞ "–ó–≤—ë–∑–¥–Ω–æ–µ –í–µ—Ä–µ—Ç–µ–Ω–æ"',
      description: '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –ø—Ä–æ–µ–∫—Ç–∞. 100% —Ö–ª–æ–ø–æ–∫, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–∏.',
      priceRub: 1500,
      type: 'MERCH' as const,
      active: true,
      visible: true,
      seasonRequired: false,
      bpUsesTotal: 1,
      meta: {
        sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
        colors: ['black', 'white', 'navy'],
        material: '100% cotton'
      }
    }
  ];

  for (const product of testProducts) {
    const existing = await db
      .select()
      .from(products)
      .where(eq(products.sku, product.sku))
      .limit(1);

    if (existing.length === 0) {
      await db.insert(products).values({
        sku: product.sku,
        title: product.title,
        description: product.description,
        priceRub: product.priceRub,
        type: product.type,
        active: product.active,
        visible: product.visible,
        seasonRequired: product.seasonRequired,
        bpUsesTotal: product.bpUsesTotal,
        meta: product.meta,
      });

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç:', product.title);
    }
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∫—É–ø–æ–∫ –±–∞—Ç—Ç–ª–ø–∞—Å—Å–æ–≤ –¥–ª—è –¥–µ–º–æ-–∏–≥—Ä–æ–∫–æ–≤
  await createTestPurchases();
}

async function createTestPurchases() {
  console.log('üõí –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏...');
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏ –±–∞—Ç—Ç–ª–ø–∞—Å—Å—ã
  const playersData = await db
    .select({
      userId: users.id,
      name: users.name
    })
    .from(users)
    .innerJoin(userRoles, eq(users.id, userRoles.userId))
    .where(eq(userRoles.role, 'PLAYER'))
    .limit(2);

  const battlepassProducts = await db
    .select()
    .from(products)
    .where(eq(products.type, 'BATTLEPASS'))
    .limit(2);

  if (playersData.length > 0 && battlepassProducts.length > 0) {
    // –î–µ–º–æ-–∏–≥—Ä–æ–∫ –ø–æ–∫—É–ø–∞–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã–π –±–∞—Ç—Ç–ª–ø–∞—Å—Å
    const seasonalBattlepass = battlepassProducts.find(p => p.title.includes('–°–µ–∑–æ–Ω–Ω—ã–π'));
    if (seasonalBattlepass) {
      const existing = await db
        .select()
        .from(battlepasses)
        .where(eq(battlepasses.userId, playersData[0].userId))
        .limit(1);

      if (existing.length === 0) {
        const expiresAt = new Date();
        expiresAt.setFullYear(expiresAt.getFullYear() + 1); // –Ω–∞ –≥–æ–¥

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω –¥–ª—è –±–∞—Ç—Ç–ª–ø–∞—Å—Å–∞
        const activeSeason = await db
          .select()
          .from(seasons)
          .where(eq(seasons.isActive, true))
          .limit(1);

        if (activeSeason.length > 0) {
          await db.insert(battlepasses).values({
            userId: playersData[0].userId,
            kind: 'SEASON',
            usesTotal: seasonalBattlepass.bpUsesTotal || 1,
            usesLeft: seasonalBattlepass.bpUsesTotal || 1,
            status: 'ACTIVE',
          });
        }

        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∞ –±–∞—Ç—Ç–ª–ø–∞—Å—Å–∞ –¥–ª—è', playersData[0].name);
      }
    }
  }
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', e);
    process.exit(1);
  })
  .finally(async () => {
    console.log('üîå –ó–∞–∫—Ä—ã–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
    process.exit(0);
  });
