version: '3.8'

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: zv_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-zvezdnoe_vereteno}
      POSTGRES_USER: ${POSTGRES_USER:-zv_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-zv_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-zv_user} -d ${POSTGRES_DB:-zvezdnoe_vereteno}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - zv_network

  # MinIO для хранения файлов
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: zv_minio_prod
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-zv_admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-zv_admin_password}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data_prod:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - zv_network

  # Создание buckets в MinIO
  minio-setup:
    image: minio/mc:latest
    container_name: zv_minio_setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: |
      /bin/sh -c "
      mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER:-zv_admin} ${MINIO_ROOT_PASSWORD:-zv_admin_password};
      mc mb myminio/avatars --ignore-existing;
      mc mb myminio/documents --ignore-existing;
      mc mb myminio/uploads --ignore-existing;
      mc anonymous set public myminio/avatars;
      mc anonymous set public myminio/documents;
      mc anonymous set public myminio/uploads;
      echo 'MinIO buckets created successfully';
      "
    networks:
      - zv_network

  # Основное приложение
  web:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: zv_web_prod
    environment:
      # База данных
      DATABASE_URL: postgresql://${POSTGRES_USER:-zv_user}:${POSTGRES_PASSWORD:-zv_password}@postgres:5432/${POSTGRES_DB:-zvezdnoe_vereteno}
      
      # MinIO/S3
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-zv_admin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-zv_admin_password}
      S3_BUCKET_AVATARS: avatars
      S3_BUCKET_DOCUMENTS: documents
      S3_BUCKET_UPLOADS: uploads
      
      # NextAuth
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      
      # Email
      EMAIL_FROM: ${EMAIL_FROM:-noreply@zvezdnoe-vereteno.ru}
      SMTP_URL: ${SMTP_URL}
      
      # Telegram Bot (опционально)
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL}
      
      # Платежи
      YKS_SHOP_ID: ${YKS_SHOP_ID}
      YKS_SECRET: ${YKS_SECRET}
      
      # Основной URL
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL:-http://localhost:3000}
      
      # Feature flags
      FEATURE_PAYMENTS: ${FEATURE_PAYMENTS:-true}
      FEATURE_TELEGRAM: ${FEATURE_TELEGRAM:-false}
      
      # Node.js
      NODE_ENV: production
      PORT: 3000
    ports:
      - "${WEB_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
    restart: unless-stopped
    networks:
      - zv_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (опционально)
  nginx:
    image: nginx:alpine
    container_name: zv_nginx_prod
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - zv_network

volumes:
  postgres_data_prod:
    driver: local
  minio_data_prod:
    driver: local

networks:
  zv_network:
    driver: bridge
