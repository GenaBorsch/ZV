version: '3.8'

services:
  # Только веб-приложение (PostgreSQL и MinIO внешние)
  web:
    build:
      context: .
      dockerfile: Dockerfile.app.simple
    container_name: zv_web_app
    environment:
      # База данных (внешняя)
      DATABASE_URL: ${DATABASE_URL}
      
      # MinIO/S3 (внешний)
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET_AVATARS: ${S3_BUCKET_AVATARS:-avatars}
      S3_BUCKET_DOCUMENTS: ${S3_BUCKET_DOCUMENTS:-documents}
      S3_BUCKET_UPLOADS: ${S3_BUCKET_UPLOADS:-uploads}
      
      # NextAuth
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      
      # Email
      EMAIL_FROM: ${EMAIL_FROM}
      SMTP_URL: ${SMTP_URL}
      
      # Telegram Bot (опционально)
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL}
      
      # Платежи
      YKS_SHOP_ID: ${YKS_SHOP_ID}
      YKS_SECRET: ${YKS_SECRET}
      
      # Основной URL
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL}
      
      # Feature flags
      FEATURE_PAYMENTS: ${FEATURE_PAYMENTS:-false}
      FEATURE_TELEGRAM: ${FEATURE_TELEGRAM:-false}
      
      # Node.js
      NODE_ENV: production
      PORT: 3000
    ports:
      - "${WEB_PORT:-3000}:3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (опционально)
  nginx:
    image: nginx:alpine
    container_name: zv_nginx_app
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      web:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - nginx  # Запускается только при указании профиля
