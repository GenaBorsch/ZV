"use client";

import { useState, useEffect } from 'react';
import { CreateGroupForm } from './CreateGroupForm';
import { GroupCreatedSuccess } from './GroupCreatedSuccess';
import { GroupDetailsModal } from './GroupDetailsModal';

interface Group {
  id: string;
  name: string;
  description: string | null;
  maxMembers: number;
  currentMembers: number;
  isRecruiting: boolean;
  format: 'ONLINE' | 'OFFLINE' | 'MIXED';
  place: string | null;
  referralCode: string | null;
  createdAt: string;
}

export function MasterDashboardContent() {
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [createdGroup, setCreatedGroup] = useState<any>(null);
  const [groups, setGroups] = useState<Group[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedGroupId, setSelectedGroupId] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø —Å —Å–µ—Ä–≤–µ—Ä–∞
  const fetchGroups = async () => {
    try {
      const response = await fetch('/api/groups');
      if (response.ok) {
        const data = await response.json();
        setGroups(data.groups || []);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:', error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchGroups();
  }, []);

  const handleCreateSuccess = (data: any) => {
    setCreatedGroup(data);
    setShowCreateForm(false);
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    fetchGroups();
  };

  const handleCreateAnother = () => {
    setCreatedGroup(null);
    setShowCreateForm(true);
  };

  return (
    <div className="px-4 py-6 sm:px-0">
      <h2 className="text-2xl font-bold text-foreground mb-6">
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–±–∏–Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–∞!
      </h2>

      {/* Stats */}
      <div className="grid grid-cols-1 gap-5 sm:grid-cols-4 mb-8">
        <div className="card p-5">
          <div className="text-sm text-muted-foreground">–ú–æ–∏ –≥—Ä—É–ø–ø—ã</div>
          <div className="text-lg font-medium">{groups.length}</div>
        </div>
        <div className="card p-5">
          <div className="text-sm text-muted-foreground">–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤</div>
          <div className="text-lg font-medium">
            {groups.reduce((total, group) => total + group.currentMembers, 0)}
          </div>
        </div>
        <div className="card p-5">
          <div className="text-sm text-muted-foreground">–ë–ª–∏–∂–∞–π—à–∏–µ –∏–≥—Ä—ã</div>
          <div className="text-lg font-medium">0</div>
        </div>
        <div className="card p-5">
          <div className="text-sm text-muted-foreground">–û—Ç—á—ë—Ç—ã</div>
          <div className="text-lg font-medium">0</div>
        </div>
      </div>

      {/* Main Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Content */}
        <div className="lg:col-span-2 space-y-6">
          {/* Create Group Form or Success Message */}
          {createdGroup ? (
            <GroupCreatedSuccess
              group={createdGroup.group}
              referralCode={createdGroup.referralCode}
              referralLink={createdGroup.referralLink}
              onCreateAnother={handleCreateAnother}
            />
          ) : showCreateForm ? (
            <CreateGroupForm onSuccess={handleCreateSuccess} />
          ) : (
            /* Groups Section */
            <div className="card p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-medium text-foreground">–ú–æ–∏ –≥—Ä—É–ø–ø—ã</h3>
                <button 
                  className="btn-primary"
                  onClick={() => setShowCreateForm(true)}
                >
                  –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
                </button>
              </div>
              
              {isLoading ? (
                <div className="border border-dashed border-border rounded-lg p-6 text-center text-muted-foreground">
                  –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø...
                </div>
              ) : groups.length === 0 ? (
                <div className="border border-dashed border-border rounded-lg p-6 text-center text-muted-foreground">
                  –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.
                </div>
              ) : (
                <div className="space-y-4">
                  {groups.map((group) => (
                    <div key={group.id} className="border border-border rounded-lg p-4">
                      <div className="flex justify-between items-start mb-2">
                        <div>
                          <h4 className="font-medium text-foreground">{group.name}</h4>
                          {group.description && (
                            <p className="text-sm text-muted-foreground mt-1">{group.description}</p>
                          )}
                        </div>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          group.isRecruiting 
                            ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                            : 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
                        }`}>
                          {group.isRecruiting ? '–ù–∞–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç' : '–ù–∞–±–æ—Ä –∑–∞–∫—Ä—ã—Ç'}
                        </span>
                      </div>
                      
                      <div className="flex items-center justify-between text-sm text-muted-foreground">
                        <div className="flex items-center space-x-4">
                          <span>üë• {group.currentMembers}/{group.maxMembers}</span>
                          <span>üéÆ {group.format}</span>
                          {group.place && <span>üìç {group.place}</span>}
                        </div>
                        
                        <div className="flex items-center gap-2">
                          <button 
                            className="text-primary hover:text-primary/80 text-sm font-medium"
                            onClick={() => setSelectedGroupId(group.id)}
                          >
                            üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                          </button>
                          {group.referralCode && (
                            <>
                              <button 
                                className="text-primary hover:text-primary/80 text-sm font-medium"
                                onClick={() => {
                                  navigator.clipboard.writeText(group.referralCode!);
                                  alert('–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
                                }}
                                title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"
                              >
                                üîó –ö–æ–¥
                              </button>
                              <button 
                                className="text-primary hover:text-primary/80 text-sm font-medium"
                                onClick={() => {
                                  const link = `${window.location.origin}/join?code=${group.referralCode}`;
                                  navigator.clipboard.writeText(link);
                                  alert('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
                                }}
                                title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"
                              >
                                üìã –°—Å—ã–ª–∫–∞
                              </button>
                            </>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Sessions Section */}
          <div className="card p-6">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium text-foreground">–ë–ª–∏–∂–∞–π—à–∏–µ –∏–≥—Ä—ã</h3>
              <button className="btn-primary" disabled>
                –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É
              </button>
            </div>
            <div className="border border-dashed border-border rounded-lg p-6 text-center text-muted-foreground">
              –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä.
            </div>
          </div>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          <div className="card p-6">
            <h3 className="text-lg font-medium text-foreground mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
            <div className="space-y-2">
              <button 
                className="w-full text-left px-3 py-2 text-sm text-foreground hover:bg-accent rounded-md"
                onClick={() => setShowCreateForm(true)}
              >
                –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
              </button>
              <button 
                className="w-full text-left px-3 py-2 text-sm text-muted-foreground cursor-not-allowed rounded-md"
                disabled
              >
                –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É
              </button>
              <button 
                className="w-full text-left px-3 py-2 text-sm text-muted-foreground cursor-not-allowed rounded-md"
                disabled
              >
                –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç
              </button>
            </div>
          </div>

          <div className="card p-6">
            <h3 className="text-lg font-medium text-foreground mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div className="space-y-3">
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –∏–≥—Ä:</span>
                <span className="font-medium">0</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:</span>
                <span className="font-medium">
                  {groups.reduce((total, group) => total + group.currentMembers, 0)}
                </span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">–ù–∞–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç:</span>
                <span className="font-medium">
                  {groups.filter(group => group.isRecruiting).length}
                </span>
              </div>
            </div>
          </div>

          {showCreateForm && (
            <div className="card p-6">
              <button 
                className="w-full text-center px-3 py-2 text-sm text-muted-foreground hover:text-foreground rounded-md"
                onClick={() => setShowCreateForm(false)}
              >
                ‚Üê –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
              </button>
            </div>
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–ø–ø—ã */}
      {selectedGroupId && (
        <GroupDetailsModal
          groupId={selectedGroupId}
          onClose={() => setSelectedGroupId(null)}
          onUpdate={() => {
            fetchGroups(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          }}
        />
      )}
    </div>
  );
}
