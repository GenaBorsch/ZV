"use client";

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { PlayerProfileModal } from './PlayerProfileModal';

interface GroupApplication {
  id: string;
  groupId: string;
  status: 'PENDING' | 'APPROVED' | 'REJECTED' | 'WITHDRAWN';
  message: string | null;
  masterResponse: string | null;
  createdAt: string;
  updatedAt: string;
  player: {
    id: string;
    userId: string;
    nickname: string | null;
    notes: string | null;
    user: {
      id: string;
      name: string | null;
      email: string;
      rpgExperience: 'NOVICE' | 'INTERMEDIATE' | 'VETERAN' | null;
      contacts: string | null;
    };
  };
}

interface GroupApplicationsListProps {
  groupId: string;
  groupName: string;
  onApplicationUpdate?: () => void;
}

const statusMap = {
  PENDING: { label: '–û–∂–∏–¥–∞–µ—Ç', color: 'text-yellow-600 bg-yellow-50' },
  APPROVED: { label: '–ü—Ä–∏–Ω—è—Ç–∞', color: 'text-green-600 bg-green-50' },
  REJECTED: { label: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞', color: 'text-red-600 bg-red-50' },
  WITHDRAWN: { label: '–û—Ç–æ–∑–≤–∞–Ω–∞', color: 'text-gray-600 bg-gray-50' },
};

const experienceMap = {
  NOVICE: '–ù–æ–≤–∏—á–æ–∫',
  INTERMEDIATE: '–û–ø—ã—Ç–Ω—ã–π',
  VETERAN: '–í–µ—Ç–µ—Ä–∞–Ω',
};

export function GroupApplicationsList({ groupId, groupName, onApplicationUpdate }: GroupApplicationsListProps) {
  const [applications, setApplications] = useState<GroupApplication[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedPlayer, setSelectedPlayer] = useState<GroupApplication['player'] | null>(null);
  const [processingApplicationId, setProcessingApplicationId] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫
  const fetchApplications = async () => {
    try {
      setIsLoading(true);
      setError(null);

      const response = await fetch(`/api/groups/${groupId}/applications`);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫');
      }

      const data = await response.json();
      setApplications(data.applications || []);
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchApplications();
  }, [groupId]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ (–ø—Ä–∏–Ω—è—Ç–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
  const handleApplicationAction = async (applicationId: string, action: 'approve' | 'reject', masterResponse?: string) => {
    try {
      setProcessingApplicationId(applicationId);

      const response = await fetch(`/api/groups/applications/${applicationId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action,
          masterResponse,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
      await fetchApplications();
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      if (onApplicationUpdate) {
        onApplicationUpdate();
      }

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error);
      alert(error.message);
    } finally {
      setProcessingApplicationId(null);
    }
  };

  const pendingApplications = applications.filter(app => app.status === 'PENDING');
  const processedApplications = applications.filter(app => app.status !== 'PENDING');

  if (isLoading) {
    return (
      <div className="card p-6">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
          <p className="mt-2 text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="card p-6">
        <div className="text-center text-red-600">
          <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫: {error}</p>
          <Button 
            onClick={fetchApplications}
            className="mt-2"
            variant="outline"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ */}
      {pendingApplications.length > 0 && (
        <div>
          <h3 className="text-lg font-medium text-foreground mb-4">
            –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ ({pendingApplications.length})
          </h3>
          <div className="space-y-4">
            {pendingApplications.map((application) => (
              <Card key={application.id} className="border-yellow-200">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div>
                        <CardTitle className="text-base">
                          {application.player.user.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}
                        </CardTitle>
                        <div className="text-sm text-muted-foreground">
                          {application.player.user.rpgExperience && (
                            <span>–û–ø—ã—Ç: {experienceMap[application.player.user.rpgExperience]} ‚Ä¢ </span>
                          )}
                          <span>{new Date(application.createdAt).toLocaleDateString('ru-RU')}</span>
                        </div>
                      </div>
                    </div>
                    <div className={`px-2 py-1 rounded-full text-xs font-medium ${statusMap[application.status].color}`}>
                      {statusMap[application.status].label}
                    </div>
                  </div>
                </CardHeader>
                
                <CardContent className="pt-0">
                  {application.message && (
                    <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                      <p className="text-sm text-muted-foreground mb-1">–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞:</p>
                      <p className="text-sm">{application.message}</p>
                    </div>
                  )}

                  <div className="flex items-center gap-2">
                    <Button
                      onClick={() => setSelectedPlayer(application.player)}
                      variant="outline"
                      size="sm"
                    >
                      üë§ –ü—Ä–æ—Ñ–∏–ª—å
                    </Button>
                    
                    <Button
                      onClick={() => handleApplicationAction(application.id, 'approve')}
                      className="bg-green-600 hover:bg-green-700 text-white"
                      size="sm"
                      disabled={processingApplicationId === application.id}
                    >
                      {processingApplicationId === application.id ? '‚è≥' : '‚úÖ'} –ü—Ä–∏–Ω—è—Ç—å
                    </Button>
                    
                    <Button
                      onClick={() => {
                        const reason = prompt('–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):');
                        if (reason !== null) { // null –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç–º–µ–Ω—É
                          handleApplicationAction(application.id, 'reject', reason || undefined);
                        }
                      }}
                      variant="destructive"
                      size="sm"
                      disabled={processingApplicationId === application.id}
                    >
                      {processingApplicationId === application.id ? '‚è≥' : '‚ùå'} –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      )}

      {/* –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ */}
      {processedApplications.length > 0 && (
        <div>
          <h3 className="text-lg font-medium text-foreground mb-4">
            –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ ({processedApplications.length})
          </h3>
          <div className="space-y-3">
            {processedApplications.map((application) => (
              <Card key={application.id} className="border-gray-200">
                <CardContent className="py-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div>
                        <p className="font-medium text-sm">
                          {application.player.user.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}
                        </p>
                        <div className="text-xs text-muted-foreground">
                          {new Date(application.updatedAt).toLocaleDateString('ru-RU')}
                          {application.masterResponse && (
                            <span> ‚Ä¢ {application.masterResponse}</span>
                          )}
                        </div>
                      </div>
                    </div>
                    <div className={`px-2 py-1 rounded-full text-xs font-medium ${statusMap[application.status].color}`}>
                      {statusMap[application.status].label}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      )}

      {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      {applications.length === 0 && (
        <div className="card p-6 text-center">
          <div className="text-muted-foreground mb-2">–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</div>
          <p className="text-sm text-muted-foreground">
            –ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥–∞–¥—É—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É "{groupName}", –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å
          </p>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏–≥—Ä–æ–∫–∞ */}
      {selectedPlayer && (
        <PlayerProfileModal
          player={selectedPlayer}
          onClose={() => setSelectedPlayer(null)}
        />
      )}
    </div>
  );
}
