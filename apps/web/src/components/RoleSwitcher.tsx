'use client';

import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { useState } from 'react';

interface RoleSwitcherProps {
  className?: string;
  label?: string;
  fullWidth?: boolean;
}

export function RoleSwitcher({ className, label, fullWidth }: RoleSwitcherProps) {
  const { data: session, update } = useSession();
  const router = useRouter();
  const [isChanging, setIsChanging] = useState(false);

  const roles = (session?.user as any)?.roles || [];
  const activeRole = (session?.user as any)?.activeRole;
  
  // –ï—Å–ª–∏ —Ä–æ–ª–∏ –º–µ–Ω—å—à–µ 2, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
  if (roles.length < 2) return null;

  const handleRoleChange = async (role: string) => {
    try {
      setIsChanging(true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
      const result = await update({
        activeRole: role,
      });

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
      await new Promise(resolve => setTimeout(resolve, 100));

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–±–∏–Ω–µ—Ç
      const redirectPaths: Record<string, string> = {
        'MASTER': '/master',
        'PLAYER': '/player',
        'MODERATOR': '/admin',
        'SUPERADMIN': '/admin',
      };

      const redirectPath = redirectPaths[role] || '/';
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º window.location –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      window.location.href = redirectPath;
    } catch (error) {
      console.error('Error changing role:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏');
      setIsChanging(false);
    }
  };

  const roleNames: Record<string, string> = {
    'MASTER': '–ú–∞—Å—Ç–µ—Ä',
    'PLAYER': '–ò–≥—Ä–æ–∫',
    'MODERATOR': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
    'SUPERADMIN': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
  };

  const roleIcons: Record<string, string> = {
    'MASTER': 'üé≤',
    'PLAYER': 'üé≠',
    'MODERATOR': 'üõ°Ô∏è',
    'SUPERADMIN': 'üëë',
  };

  return (
    <div className={`relative ${fullWidth ? 'w-full' : ''} ${className || ''}`}>
      {label && <label className="block text-sm text-muted-foreground mb-1">{label}</label>}
      <select
        value={activeRole || ''}
        onChange={(e) => handleRoleChange(e.target.value)}
        disabled={isChanging}
        className={`bg-background border border-border rounded-md px-3 py-1.5 text-sm text-foreground hover:bg-accent transition-colors cursor-pointer disabled:opacity-50 ${fullWidth ? 'w-full' : ''}`}
        title="–í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å"
      >
        {roles.map((role: string) => (
          <option key={role} value={role}>
            {roleIcons[role]} {roleNames[role]}
          </option>
        ))}
      </select>
    </div>
  );
}

