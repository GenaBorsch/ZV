import { NextResponse } from 'next/server';
import { db, orders, battlepasses, orderItems, eq } from '@zv/db';

function env(key: string): string {
  const value = process.env[key];
  if (!value) {
    throw new Error(`Environment variable ${key} is not set`);
  }
  return value;
}

export async function POST(req: Request) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø–ª–∞—Ç–µ–∂–∏
    const paymentsEnabled = process.env.FEATURE_PAYMENTS === 'true';
    if (!paymentsEnabled) {
      return NextResponse.json({ ok: true });
    }

    // YooKassa webhook payload
    const body = await req.json();
    const event = body?.event as string | undefined;
    const paymentObject = body?.object;
    
    if (!event || !paymentObject) {
      return NextResponse.json({ ok: false, reason: 'bad payload' }, { status: 400 });
    }

    const providerPaymentId = paymentObject.id as string | undefined;
    const metadata = paymentObject.metadata || {};
    const orderId: string | undefined = metadata.orderId;

    console.log('üé£ Webhook received:', { event, paymentId: providerPaymentId, orderId });

    if (!providerPaymentId) {
      return NextResponse.json({ ok: false, reason: 'no payment id' }, { status: 400 });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    if (event === 'payment.succeeded') {
      console.log('üí∞ Processing successful payment:', { orderId, providerPaymentId });

      if (orderId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
        await db.update(orders)
          .set({ 
            status: 'PAID',
            paidAt: new Date(),
            providerId: providerPaymentId
          })
          .where(eq(orders.id, orderId));

        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞—Ç—Ç–ª–ø–∞—Å—Å–∞
        const [order] = await db.select().from(orders).where(eq(orders.id, orderId)).limit(1);
        
        if (order) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: forUserId –∏–ª–∏ userId (–µ—Å–ª–∏ –ø–æ–∫—É–ø–∞–µ—Ç –¥–ª—è —Å–µ–±—è)
          const targetUserId = order.forUserId || order.userId;
          
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ order_items
          const [orderItem] = await db.select()
            .from(orderItems)
            .where(eq(orderItems.orderId, orderId))
            .limit(1);

          const totalUses = orderItem?.bpUsesTotalAtPurchase || 1;
          const productTitle = orderItem?.productTitleSnapshot || '–ü—É—Ç—ë–≤–∫–∞';
          
          await db.insert(battlepasses).values({
            userId: targetUserId,
            kind: 'SINGLE',
            title: productTitle,
            usesTotal: totalUses,
            usesLeft: totalUses,
            status: 'ACTIVE',
          });
          
          console.log('üéÆ Battlepass issued to user:', targetUserId, 'with', totalUses, 'uses, title:', productTitle);
        }
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ/–Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    else if (event === 'payment.canceled') {
      console.log('‚ùå Processing canceled payment:', { orderId, providerPaymentId });

      if (orderId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π
        await db.update(orders)
          .set({ 
            status: 'CANCELLED',
            providerId: providerPaymentId
          })
          .where(eq(orders.id, orderId));

        console.log('üö´ Order marked as cancelled:', orderId);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π (waiting_for_capture, pending, etc.)
    else if (event === 'payment.waiting_for_capture') {
      console.log('‚è≥ Payment waiting for capture:', { orderId, providerPaymentId });
      
      if (orderId) {
        await db.update(orders)
          .set({ 
            status: 'PENDING',
            providerId: providerPaymentId
          })
          .where(eq(orders.id, orderId));
      }
    }
    
    else {
      console.log('‚ÑπÔ∏è Unhandled webhook event:', event);
    }

    return NextResponse.json({ ok: true });
  } catch (e: any) {
    console.error('‚ùå Webhook processing error:', e);
    return NextResponse.json({ ok: false, error: e?.message || String(e) }, { status: 500 });
  }
}


