import { NextResponse } from 'next/server';
import { db, orders, battlepasses, eq } from '@zv/db';

function env(key: string): string {
  const value = process.env[key];
  if (!value) {
    throw new Error(`Environment variable ${key} is not set`);
  }
  return value;
}

export async function POST(req: Request) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø–ª–∞—Ç–µ–∂–∏
    const paymentsEnabled = process.env.FEATURE_PAYMENTS === 'true';
    if (!paymentsEnabled) {
      return NextResponse.json({ ok: true });
    }

    // YooKassa webhook payload
    const body = await req.json();
    const event = body?.event as string | undefined;
    const paymentObject = body?.object;
    
    if (!event || !paymentObject) {
      return NextResponse.json({ ok: false, reason: 'bad payload' }, { status: 400 });
    }

    console.log('üé£ Webhook received:', { event, paymentId: paymentObject.id });

    if (event === 'payment.succeeded') {
      const providerPaymentId = paymentObject.id as string | undefined;
      const metadata = paymentObject.metadata || {};
      const orderId: string | undefined = metadata.orderId;

      if (!providerPaymentId) {
        return NextResponse.json({ ok: false, reason: 'no payment id' }, { status: 400 });
      }

      console.log('üí∞ Processing successful payment:', { orderId, providerPaymentId });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
      if (orderId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
        await db.update(orders)
          .set({ 
            status: 'PAID',
            paidAt: new Date(),
            providerId: providerPaymentId
          })
          .where(eq(orders.id, orderId));

        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞—Ç—Ç–ª–ø–∞—Å—Å–∞
        const [order] = await db.select().from(orders).where(eq(orders.id, orderId)).limit(1);
        
        if (order && order.forUserId) {
          // –í—ã–¥–∞–µ–º –±–∞—Ç—Ç–ª–ø–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await db.insert(battlepasses).values({
            userId: order.forUserId,
            orderId: order.id,
            usesLeft: 1, // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
            totalUses: 1,
            isActive: true,
          });
          
          console.log('üéÆ Battlepass issued to user:', order.forUserId);
        }
      }
    }

    return NextResponse.json({ ok: true });
  } catch (e: any) {
    console.error('‚ùå Webhook processing error:', e);
    return NextResponse.json({ ok: false, error: e?.message || String(e) }, { status: 500 });
  }
}


