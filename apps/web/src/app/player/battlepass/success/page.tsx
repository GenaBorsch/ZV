import Link from 'next/link';
import { db, orders, battlepasses, orderItems, eq, and } from '@zv/db';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { redirect } from 'next/navigation';

interface Props {
  searchParams: { orderId?: string };
}

export default async function BattlepassSuccessPage({ searchParams }: Props) {
  const session = await getServerSession(authOptions as any);
  
  if (!session?.user?.id) {
    redirect('/auth/login');
  }

  const { orderId } = searchParams;
  let order = null;
  let battlepass = null;

  if (orderId) {
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –ø–æ ID
    const [foundOrder] = await db.select()
      .from(orders)
      .where(eq(orders.id, orderId))
      .limit(1);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–∫–∞–∑ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (foundOrder) {
      const isUserOrder = foundOrder.forUserId === session.user.id || 
                         (foundOrder.forUserId === null && foundOrder.userId === session.user.id);
      
      if (isUserOrder) {
        order = foundOrder;
      }
    }

    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω, –∏—â–µ–º –≤—ã–¥–∞–Ω–Ω—ã–π –±–∞—Ç—Ç–ª–ø–∞—Å—Å
    if (order && order.status === 'PAID') {
      const [foundBattlepass] = await db.select()
        .from(battlepasses)
        .where(eq(battlepasses.userId, session.user.id))
        .limit(1);
      
      battlepass = foundBattlepass;
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
  const getStatusContent = () => {
    if (!order) {
      return {
        icon: '‚ùì',
        title: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã.',
        color: 'text-yellow-600',
        bgColor: 'bg-yellow-50 dark:bg-yellow-900/20',
        borderColor: 'border-yellow-200 dark:border-yellow-800'
      };
    }

    switch (order.status) {
      case 'PAID':
        return {
          icon: '‚úÖ',
          title: '–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!',
          message: battlepass 
            ? `–ü—É—Ç—ë–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã! –£ –≤–∞—Å –µ—Å—Ç—å ${battlepass.usesLeft} –∏–∑ ${battlepass.usesTotal} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.`
            : '–ü—É—Ç—ë–≤–∫–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã. –ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
          color: 'text-green-600',
          bgColor: 'bg-green-50 dark:bg-green-900/20',
          borderColor: 'border-green-200 dark:border-green-800'
        };
      
      case 'CANCELLED':
        return {
          icon: '‚ùå',
          title: '–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
          message: '–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞.',
          color: 'text-red-600',
          bgColor: 'bg-red-50 dark:bg-red-900/20',
          borderColor: 'border-red-200 dark:border-red-800'
        };
      
      case 'PENDING':
        return {
          icon: '‚è≥',
          title: '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
          message: '–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.',
          color: 'text-blue-600',
          bgColor: 'bg-blue-50 dark:bg-blue-900/20',
          borderColor: 'border-blue-200 dark:border-blue-800'
        };
      
      default:
        return {
          icon: '‚ö†Ô∏è',
          title: '–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω',
          message: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.',
          color: 'text-gray-600',
          bgColor: 'bg-gray-50 dark:bg-gray-900/20',
          borderColor: 'border-gray-200 dark:border-gray-800'
        };
    }
  };

  const status = getStatusContent();
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ order_items
  let product = null;
  if (order) {
    const [orderItem] = await db.select()
      .from(orderItems)
      .where(eq(orderItems.orderId, order.id))
      .limit(1);
    
    if (orderItem) {
      product = {
        title: orderItem.productTitleSnapshot,
        priceRub: orderItem.priceRub,
        sku: orderItem.productSkuSnapshot
      };
    }
  }

  return (
    <div className="max-w-2xl mx-auto py-12 px-4">
      <div className={`${status.bgColor} ${status.borderColor} border rounded-lg p-8 mb-8`}>
        <div className="text-center">
          <div className="text-6xl mb-4">{status.icon}</div>
          <h1 className={`text-2xl font-semibold ${status.color} mb-4`}>
            {status.title}
          </h1>
          <p className="text-muted-foreground mb-6 text-lg">
            {status.message}
          </p>

          {order && (
            <div className="bg-white dark:bg-gray-800 rounded-lg p-4 mb-6 text-left">
              <h3 className="font-medium text-foreground mb-3">–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-muted-foreground">–ó–∞–∫–∞–∑:</span>
                  <span className="font-mono text-xs">{order.id}</span>
                </div>
                {product && (
                  <>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">–¢–æ–≤–∞—Ä:</span>
                      <span>{product.title}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">–°—É–º–º–∞:</span>
                      <span>{product.priceRub} ‚ÇΩ</span>
                    </div>
                  </>
                )}
                <div className="flex justify-between">
                  <span className="text-muted-foreground">–°—Ç–∞—Ç—É—Å:</span>
                  <span className={`font-medium ${status.color}`}>
                    {order.status === 'PAID' ? '–û–ø–ª–∞—á–µ–Ω' : 
                     order.status === 'CANCELLED' ? '–û—Ç–º–µ–Ω–µ–Ω' :
                     order.status === 'PENDING' ? '–û–∂–∏–¥–∞–µ—Ç' : order.status}
                  </span>
                </div>
                {order.fulfilledAt && (
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</span>
                    <span>{new Date(order.fulfilledAt).toLocaleString('ru-RU')}</span>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>

      <div className="flex gap-3 justify-center">
        {order?.status === 'PAID' && (
          <Link href="/player" className="btn-primary">
            üéÆ –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
          </Link>
        )}
        {order?.status === 'CANCELLED' && (
          <Link href="/player/battlepass" className="btn-primary">
            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Link>
        )}
        {order?.status === 'PENDING' && (
          <Link href={`/player/battlepass/success?orderId=${orderId}`} className="btn-primary">
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          </Link>
        )}
        <Link href="/player" className="btn-outline">
          ‚Üê –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç
        </Link>
      </div>
    </div>
  );
}


